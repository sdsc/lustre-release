Introduce NOCACHE flag and force MD devices to pass
NOCACHE reads directly to the disk instead of handling
from cache. This is needed for MMP on MD RAID devices.
Not needed for DMU.
 
--- a/include/linux/blk_types.h
+++ b/include/linux/blk_types.h
@@ -132,6 +132,7 @@ enum rq_flag_bits {
 	__REQ_MIXED_MERGE,	/* merge of different types, fail separately */
 	__REQ_FLUSH,		/* request for cache flush */
 	__REQ_FLUSH_SEQ,	/* request for flush sequence */
+	__REQ_NOCACHE,		/* request bypass any cache */
 	__REQ_NR_BITS,		/* stops here */
 };
 
@@ -182,6 +183,7 @@ enum rq_flag_bits {
 #define REQ_FLUSH_SEQ		(1 << __REQ_FLUSH_SEQ)
 #define REQ_IO_STAT		(1 << __REQ_IO_STAT)
 #define REQ_MIXED_MERGE		(1 << __REQ_MIXED_MERGE)
+#define REQ_NOCACHE		(1 << __REQ_NOCACHE)
 
 #define REQ_WRITE_FLUSH		(REQ_WRITE | REQ_SYNC | REQ_NOIDLE | REQ_FLUSH)
 
--- a/drivers/md/raid5.c
+++ b/drivers/md/raid5.c
@@ -2440,6 +2440,12 @@ static int add_stripe_bio(struct stripe_
 		}
 		if (sector >= sh->dev[dd_idx].sector + STRIPE_SECTORS)
 			set_bit(R5_OVERWRITE, &sh->dev[dd_idx].flags);
+	} else if (bi->bi_rw & REQ_NOCACHE) {
+		/* force read from underlying device */
+		pr_debug(" %s: device %s: request with REQ_NOCACHE/%ld "
+			 "for stripe index %d\n", __func__, mdname(conf->mddev),
+			 bi->bi_rw, dd_idx);
+		clear_bit(R5_UPTODATE, &sh->dev[dd_idx].flags);
 	}
 
 	pr_debug("added bi b#%llu to stripe s#%llu, disk %d.\n",
