.TH llapi_layout_by_fd 3 "2013 Oct 31" "Lustre User API"
.SH NAME
llapi_layout_by_fd, llapi_layout_by_fid, llapi_layout_by_path,
llapi_layout_expected \- obtain the layout of a Lustre file
.SH SYNOPSIS
.nf
.B #include <lustre/lustreapi.h>
.PP
.BI "struct llapi_layout *llapi_layout_by_fd(int "fd );
.PP
.BI "struct llapi_layout *llapi_layout_by_fid(const char *"lustre_dir ,
.BI "                                         lustre_fid *"fid );
.PP
.BI "struct llapi_layout *llapi_layout_by_path(const char *"path );
.PP
.BI "struct llapi_layout *llapi_layout_expected(const char *"path );
.fi
.SH DESCRIPTION
.PP
.BR llapi_layout_by_fd() ,
.BR llapi_layout_by_fid() ,
.BR llapi_layout_by_path(),
and
.B llapi_layout_expected()
return a pointer to a newly-allocated
.B struct llapi_layout
containing the layout information for the file referenced by
.IR fd ,
.IR fid ,
or
.IR path .
The
.B struct llapi_layout
is an opaque entity containing the layout information for a file in a
Lustre filesystem.  Its internal structure should not be directly
accessed by an application.  See
.BR llapi_layout (7).
The pointer should be freed with
.B llapi_layout_free()
when it is no longer needed.
.PP
For
.BR llapi_layout_by_fd() ,
.I fd
is a valid open file descriptor for a file or directory in a Lustre
filesystem.
.PP
For
.BR llapi_layout_by_fid() ,
the path named by
.I lustre_dir
serves to identify the Lustre filesystem containing the file
represented by
.IR fid .
It is typically the filesystem root, but may also be any path beneath
the root.  Use the function
.BR llapi_path2fid (3)
to obtain a
.B lustre_fid
associated with a given path.
.PP
The functions
.B llapi_layout_by_path()
and
.B llapi_layout_expected()
accept a
.I path
argument that names a file or directory in a Lustre filesystem.  They
differ only in how they report the values of unspecified attributes.
Unspecified attributes may belong to directories and never-written-to
files, and indicate that default values will be assigned when files are
created or first written to.  Layouts returned by
.B llapi_layout_by_path()
report the abstract value
.B LLAPI_LAYOUT_DEFAULT
to indicate an unspecified attribute,
whereas
.B llapi_layout_expected()
replaces unspecified values with the literal default values that would
be assigned.
.PP
Use
.B llapi_layout_by_path()
if you need to distinguish between specified and unspecified attributes.
Use
.B llapi_layout_expected()
to discover the expected literal values for new files in a given
directory.  The two functions behave the same if
.I path
names a file or directory with a fully specified layout.
.PP
For concreteness, consider a Lustre filesystem with a default stripe
size of 1048576 and a default stripe count of 1.  A user sets the stripe
count for directory D to 2 but leaves the stripe size unspecified.
Newly created files in D inherit a stripe count of 2 from D and a stripe
size of 1048576 from the filesystem default.  The layout of D returned
by
.B llapi_layout_by_path()
has the abstract stripe size value
.BR LLAPI_LAYOUT_DEFAULT ,
since stripe size is unspecified, while
.B llapi_layout_expected()
reports the literal value 1048576.  Both functions report a stripe count
of 2, since that attribute is specified.
.SH RETURN VALUES
.LP
.BR llapi_layout_by_fd() ,
.BR llapi_layout_by_fid() ,
.BR llapi_layout_by_path() ,
and
.B llapi_layout_expected()
return a valid pointer on success or
.B NULL
on failure with
.B errno
set to an approporiate error code.
.SH ERRORS
.TP 15
.SM ENOMEM
Insufficient storage space is available.
.TP
.SM ENOTTY
.I path
does not reside on a Lustre filesystem.
.TP
.SM ENOENT
.I path
does not exist.
.TP
.SM EINVAL
An invalid argument was specified.
.SH "SEE ALSO"
.BR llapi_layout_file_open (3),
.BR llapi_path2fid (3),
.BR llapi_layout (7),
.BR liblustreapi (7)
