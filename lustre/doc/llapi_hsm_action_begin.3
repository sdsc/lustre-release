.\" Man page generated from reStructuredText.
.
.TH LLAPI_HSM_ACTION_BEGIN 3 "2014-09-20" "" "Lustre HSM User API"
.SH NAME
llapi_hsm_action_begin \- Lustre API copytool management
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
\fB#include <lustre/lustreapi.h>\fP
.sp
\fBint llapi_hsm_action_begin(struct hsm_copyaction_private **\fPphcp\fB,
const struct hsm_copytool_private *\fPct\fB, const struct
hsm_action_item *\fPhai\fB, int\fP restore_mdt_index\fB, int\fP
restore_open_flags\fB, bool\fP is_error\fB)\fP
.sp
\fBint llapi_hsm_action_end(struct hsm_copyaction_private **\fPphcp\fB,
const struct hsm_extent *\fPhe\fB, int\fP hp_flags\fB, int\fP errval\fB)\fP
.sp
\fBint llapi_hsm_action_progress(struct hsm_copyaction_private *\fPhcp\fB,
const struct hsm_extent *\fPhe\fB, __u64\fP total\fB, int\fP hp_flags\fB)\fP
.sp
\fBint llapi_hsm_action_get_dfid(const struct hsm_copyaction_private *\fPhcp\fB,
lustre_fid  *\fPfid\fB)\fP
.sp
\fBint llapi_hsm_action_get_fd(const struct hsm_copyaction_private *\fPhcp\fB)\fP
.SH DESCRIPTION
.sp
When a copytool is ready to process an HSM action, received through
\fBllapi_hsm_copytool_recv\fP(), it must call
\fBllapi_hsm_action_begin\fP(). \fIct\fP is the opaque copytools handle
previously returned by \fBllapi_hsm_copytool_register\fP(). \fIhai\fP is
the request. \fIrestore_mdt_index\fP and \fIrestore_open_flags\fP are only
used for an \fBHSMA_RESTORE\fP type of request. \fIrestore_mdt_index\fP is
the MDT index on which to create the restored file, or \-1 for
default. If the copytool doesn\(aqt intend to process the request, it
should set \fIis_error\fP to \fBtrue\fP, and then call
\fBllapi_hsm_action_end\fP().
.sp
While performing a copy (i.e. the HSM request is either
\fBHSMA_ARCHIVE\fP or \fBHSMA_RESTORE\fP), the copytool can inform Lustre
of the progress of the operation with \fBllapi_hsm_action_progress\fP(). \fIhe\fP is the interval (\fIoffset\fP, \fIlength\fP) of the data
copied. \fIlength\fP is the total length that is expected to be
transfered. \fIhp_flags\fP should be 0. The progress can be checked on any
Lustre client by calling \fBllapi_hsm_current_action\fP(), or by using
\fBlfs hsm_action\fP.
.sp
Once the HSM request has been performed,
\fBllapi_hsm_action_progress\fP() must be called to free\-up the
allocated ressources. \fIerrval\fP is set to 0 on success. On error, it
must be an errno, and hp_flags can be set to \fBHP_FLAG_RETRY\fP if the
request is retryable, 0 otherwise. \fIhe\fP is the interval (\fIoffset\fP,
\fIlength\fP) of the data copied. It can be the \fIhai_extent\fP of the HSM
request.
.sp
For a restore operation, a volatile file, invisible to ls, is
created. \fBllapi_hsm_action_get_fd\fP() will return a file descriptor
to it, and \fBllapi_hsm_action_get_dfid\fP() will retrieve its FID.
.SH RETURN VALUE
.sp
\fBllapi_hsm_action_get_fd\fP() returns a file descriptor on
success. The other functions return 0 on success. All functions return
a negative errno on failure.
.SH ERRORS
.sp
The negative errno can be, but is not limited to:
.sp
\fB\-EINVAL\fP An invalid value was passed, the copytool is not opened, ...
.sp
\fB\-ENOMEM\fP Not enough memory to allocate a ressource.
.SH SEE ALSO
.sp
\fBllapi_hsm_copytool_register\fP(3), \fBllapi_hsm_copytool_recv\fP(3),
\fBlustreapi\fP(7), \fBlfs\fP(1)
.sp
See \fIlhsmtool_posix.c\fP in the Lustre sources for a use case of this
API.
.SH AUTHOR
Frank Zago
.\" Generated by docutils manpage writer.
.
