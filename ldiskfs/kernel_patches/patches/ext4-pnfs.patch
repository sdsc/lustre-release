Index: linux-stage/fs/ext4/ext4_extents.h
===================================================================
--- linux-stage.orig/fs/ext4/ext4_extents.h
+++ linux-stage/fs/ext4/ext4_extents.h
@@ -299,7 +299,16 @@ extern int ext4_can_extents_be_merged(st
 extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, int);
 extern struct ext4_ext_path *ext4_ext_find_extent(struct inode *, ext4_lblk_t,
 							struct ext4_ext_path *);
+extern int ext4_ext_search_left(struct inode *inode,
+			 struct ext4_ext_path *path,
+			 ext4_lblk_t *logical, ext4_fsblk_t *phys);
+extern int ext4_ext_search_right(struct inode *inode,
+			  struct ext4_ext_path *path,
+			  ext4_lblk_t *logical, ext4_fsblk_t *phys);
 extern void ext4_ext_drop_refs(struct ext4_ext_path *);
 extern int ext4_ext_check_inode(struct inode *inode);
+extern int ext4_ext_walk_space(struct inode *inode, ext4_lblk_t block,
+			ext4_lblk_t num, ext_prepare_callback func,
+			void *cbdata);
 #endif /* _EXT4_EXTENTS */
 
Index: linux-stage/fs/ext4/ext4.h
===================================================================
--- linux-stage.orig/fs/ext4/ext4.h
+++ linux-stage/fs/ext4/ext4.h
@@ -914,6 +914,7 @@ struct ext4_inode_info {
 #define EXT4_MOUNT_POSIX_ACL		0x08000	/* POSIX Access Control Lists */
 #define EXT4_MOUNT_NO_AUTO_DA_ALLOC	0x10000	/* No auto delalloc mapping */
 #define EXT4_MOUNT_BARRIER		0x20000 /* Use block barriers */
+#define EXT4_MOUNT_EXTENTS		0x40000 /* Use extents */
 #define EXT4_MOUNT_QUOTA		0x80000 /* Some quota option set */
 #define EXT4_MOUNT_USRQUOTA		0x100000 /* "old" user quota */
 #define EXT4_MOUNT_GRPQUOTA		0x200000 /* "old" group quota */
Index: linux-stage/fs/ext4/extents.c
===================================================================
--- linux-stage.orig/fs/ext4/extents.c
+++ linux-stage/fs/ext4/extents.c
@@ -1206,9 +1206,9 @@ out:
  * returns 0 at @phys
  * return value contains 0 (success) or error code
  */
-static int ext4_ext_search_left(struct inode *inode,
-				struct ext4_ext_path *path,
-				ext4_lblk_t *logical, ext4_fsblk_t *phys)
+int ext4_ext_search_left(struct inode *inode,
+			 struct ext4_ext_path *path,
+			 ext4_lblk_t *logical, ext4_fsblk_t *phys)
 {
 	struct ext4_extent_idx *ix;
 	struct ext4_extent *ex;
@@ -1271,9 +1271,9 @@ static int ext4_ext_search_left(struct i
  * returns 0 at @phys
  * return value contains 0 (success) or error code
  */
-static int ext4_ext_search_right(struct inode *inode,
-				 struct ext4_ext_path *path,
-				 ext4_lblk_t *logical, ext4_fsblk_t *phys)
+int ext4_ext_search_right(struct inode *inode,
+			  struct ext4_ext_path *path,
+			  ext4_lblk_t *logical, ext4_fsblk_t *phys)
 {
 	struct buffer_head *bh = NULL;
 	struct ext4_extent_header *eh;
@@ -1821,9 +1821,9 @@ cleanup:
 	return err;
 }
 
-static int ext4_ext_walk_space(struct inode *inode, ext4_lblk_t block,
-			       ext4_lblk_t num, ext_prepare_callback func,
-			       void *cbdata)
+int ext4_ext_walk_space(struct inode *inode, ext4_lblk_t block,
+			ext4_lblk_t num, ext_prepare_callback func,
+			void *cbdata)
 {
 	struct ext4_ext_path *path = NULL;
 	struct ext4_ext_cache cbex;
@@ -3159,14 +3159,13 @@ static int check_eofblocks_fl(handle_t *
 {
 	int i, depth;
 	struct ext4_extent_header *eh;
-	struct ext4_extent *ex, *last_ex;
+	struct ext4_extent *last_ex;
 
 	if (!ext4_test_inode_flag(inode, EXT4_INODE_EOFBLOCKS))
 		return 0;
 
 	depth = ext_depth(inode);
 	eh = path[depth].p_hdr;
-	ex = path[depth].p_ext;
 
 	if (unlikely(!eh->eh_entries)) {
 		EXT4_ERROR_INODE(inode, "eh->eh_entries == 0 and "
@@ -3346,7 +3345,6 @@ int ext4_ext_map_blocks(handle_t *handle
 			struct ext4_map_blocks *map, int flags)
 {
 	struct ext4_ext_path *path = NULL;
-	struct ext4_extent_header *eh;
 	struct ext4_extent newex, *ex;
 	ext4_fsblk_t newblock;
 	int err = 0, depth, ret;
@@ -3403,7 +3401,6 @@ int ext4_ext_map_blocks(handle_t *handle
 		err = -EIO;
 		goto out2;
 	}
-	eh = path[depth].p_hdr;
 
 	ex = path[depth].p_ext;
 	if (ex) {
@@ -3980,7 +3977,6 @@ int ext4_fiemap(struct inode *inode, str
 EXPORT_SYMBOL(ext4_ext_store_pblock);
 EXPORT_SYMBOL(ext4_ext_search_right);
 EXPORT_SYMBOL(ext4_ext_search_left);
-EXPORT_SYMBOL(ext_pblock);
 EXPORT_SYMBOL(ext4_ext_insert_extent);
 EXPORT_SYMBOL(ext4_mb_new_blocks);
 EXPORT_SYMBOL(ext4_ext_calc_credits_for_insert);
Index: linux-stage/fs/ext4/inode.c
===================================================================
--- linux-stage.orig/fs/ext4/inode.c
+++ linux-stage/fs/ext4/inode.c
@@ -5914,6 +5914,7 @@ out_unlock:
 	return ret;
 }
 
+#if 0
 int ext4_map_inode_page(struct inode *inode, struct page *page,
 			unsigned long *blocks, int *created, int create)
 {
@@ -5977,3 +5978,4 @@ out:
 	ext4_journal_stop(handle);
 	return rc;
 }
+#endif
Index: linux-stage/fs/ext4/mballoc.c
===================================================================
--- linux-stage.orig/fs/ext4/mballoc.c
+++ linux-stage/fs/ext4/mballoc.c
@@ -3094,10 +3094,14 @@ ext4_mb_normalize_request(struct ext4_al
 {
 	int bsbits, i, wind;
 	ext4_lblk_t end;
-	loff_t size, orig_size;
+	loff_t size;
+#ifdef CONFIG_EXT4_DEBUG
+	loff_t orig_size;
+#endif
 	ext4_lblk_t start;
 	struct ext4_inode_info *ei = EXT4_I(ac->ac_inode);
 	struct ext4_prealloc_space *pa;
+	struct ext4_sb_info *sbi = EXT4_SB(ac->ac_sb);
 
 	/* do normalize only data requests, metadata requests
 	   do not need preallocation */
@@ -3127,7 +3131,9 @@ ext4_mb_normalize_request(struct ext4_al
 	if (size < i_size_read(ac->ac_inode))
 		size = i_size_read(ac->ac_inode);
 	size = (size + ac->ac_sb->s_blocksize - 1) >> bsbits;
+#ifdef CONFIG_EXT4_DEBUG
 	orig_size = size;
+#endif
 
 	start = wind = 0;
 
@@ -3154,8 +3160,9 @@ ext4_mb_normalize_request(struct ext4_al
 		tend = tend * wind + wind;
 		size = tend - start;
 	}
+#ifdef CONFIG_EXT4_DEBUG
 	orig_size = size;
-	orig_start = start;
+#endif
 
 	/* don't cover already allocated blocks in selected range */
 	if (ar->pleft && start <= ar->lleft) {
@@ -3876,7 +3883,6 @@ ext4_mb_release_inode_pa(struct ext4_bud
 				(unsigned)pa->pa_error, pa->pa_inode->i_ino,
 				free);
 		ext4_grp_locked_error(sb, group, 0, 0, "free %u, pa_free %u",
-				__func__, "free %u, pa_free %u",
 				free, pa->pa_free);
 		/*
 		 * pa is already deleted so we use the value obtained
@@ -4782,7 +4788,6 @@ ext4_mb_free_metadata(handle_t *handle, 
  * @inode:		inode
  * @block:		start physical block to free
  * @count:		number of blocks to count
- * @metadata: 		Are these metadata blocks
  */
 void ext4_free_blocks(handle_t *handle, struct inode *inode,
 		      struct buffer_head *bh, ext4_fsblk_t block,
@@ -4820,9 +4825,9 @@ void ext4_free_blocks(handle_t *handle, 
 		struct block_device *bdev = sb->s_bdev;
 
 		printk(KERN_WARNING "Release to readonly device %s (%#x): "
-			"[inode %lu] [block %llu] [count %lu] [is_meta %d]\n",
+			"[inode %lu] [block %llu] [count %lu]\n",
 			bdev->bd_disk ? bdev->bd_disk->disk_name : "",
-			bdev->bd_dev, inode->i_ino, block, count, metadata);
+			bdev->bd_dev, inode->i_ino, block, count);
 	}
 
 	ext4_debug("freeing block %llu\n", block);
Index: linux-stage/fs/ext4/mmp.c
===================================================================
--- linux-stage.orig/fs/ext4/mmp.c
+++ linux-stage/fs/ext4/mmp.c
@@ -71,12 +71,12 @@ static int read_mmp_block(struct super_b
 void __dump_mmp_msg(struct super_block *sb, struct mmp_struct *mmp,
                    const char *function, const char *msg)
 {
-       __ext4_warning(sb, function, msg);
-       __ext4_warning(sb, function,
-                      "MMP failure info: last update time: %llu, last update "
-                      "node: %s, last update device: %s\n",
-                      (long long unsigned int) le64_to_cpu(mmp->mmp_time),
-                      mmp->mmp_nodename, mmp->mmp_bdevname);
+       ext4_warning(sb, function, msg);
+       ext4_warning(sb, function,
+                    "MMP failure info: last update time: %llu, last update "
+                    "node: %s, last update device: %s\n",
+                    (long long unsigned int) le64_to_cpu(mmp->mmp_time),
+                    mmp->mmp_nodename, mmp->mmp_bdevname);
 }
 
 /*
Index: linux-stage/fs/ext4/namei.c
===================================================================
--- linux-stage.orig/fs/ext4/namei.c
+++ linux-stage/fs/ext4/namei.c
@@ -1096,11 +1096,11 @@ static struct dentry *ext4_lookup(struct
 		struct list_head *lp;
 
 		/* first, look for an existing dentry - any one is good */
-		spin_lock(&dcache_lock);
+		spin_lock(&inode->i_lock);
 		list_for_each(lp, &inode->i_dentry) {
 			tmp = list_entry(lp, struct dentry, d_alias);
 			goal = tmp;
-			dget_locked(goal);
+			dget(goal);
 			break;
 		}
 		if (goal == NULL) {
@@ -1113,7 +1113,7 @@ static struct dentry *ext4_lookup(struct
 			list_add(&dentry->d_alias, &inode->i_dentry);
 			dentry->d_inode = inode;
 		}
-		spin_unlock(&dcache_lock);
+		spin_unlock(&inode->i_lock);
 		if (goal)
 			iput(inode);
 		return goal;
@@ -2057,9 +2057,10 @@ int ext4_add_dot_dotdot(handle_t *handle
 		de->file_type |= EXT4_DIRENT_LUFID;
 	}
 	de->rec_len = cpu_to_le16(EXT4_DIR_REC_LEN(de));
-	dot_reclen = cpu_to_le16(de->rec_len);
+	dot_reclen = le16_to_cpu(de->rec_len);
 	de = ext4_next_entry(de, blocksize);
 	de->inode = cpu_to_le32(dir->i_ino);
+	de->rec_len = ext4_rec_len_to_disk(blocksize - dot_reclen, blocksize);
 	de->name_len = 2;
 	strcpy(de->name, "..");
 	ext4_set_de_type(dir->i_sb, de, S_IFDIR);
Index: linux-stage/fs/ext4/super.c
===================================================================
--- linux-stage.orig/fs/ext4/super.c
+++ linux-stage/fs/ext4/super.c
@@ -1881,7 +1881,7 @@ set_qf_format:
 						 "on this filesystem, use tune2fs");
 				return 0;
 			}
-			set_opt(sbi->s_mount_opt, EXTENTS);
+			set_opt(sb, EXTENTS);
 			break;
 		case Opt_noextents:
 			/*
@@ -1898,10 +1898,10 @@ set_qf_format:
 						"-o noextents options\n");
 				return 0;
 			}
-			clear_opt(sbi->s_mount_opt, EXTENTS);
+			clear_opt(sb, EXTENTS);
 			break;
 		case Opt_no_mbcache:
-			set_opt(sbi->s_mount_opt, NO_MBCACHE);
+			set_opt(sb, NO_MBCACHE);
 			break;
 		default:
 			ext4_msg(sb, KERN_ERR,
@@ -3217,7 +3217,7 @@ static int ext4_fill_super(struct super_
 	 * Use -o noextents to turn it off
 	 */
 	if (EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS))
-		set_opt(sbi->s_mount_opt, EXTENTS);
+		set_opt(sb, EXTENTS);
 	else
 		ext4_warning(sb, "extents feature not enabled on this filesystem, "
 				 "use tune2fs.");
@@ -5033,9 +5033,11 @@ static void __exit ext4_exit_fs(void)
 	ext4_exit_pageio();
 }
 
+#if 0
 int ext4_map_inode_page(struct inode *inode, struct page *page,
 			unsigned long *blocks, int *created, int create);
 EXPORT_SYMBOL(ext4_map_inode_page);
+#endif
 
 EXPORT_SYMBOL(ext4_xattr_get);
 EXPORT_SYMBOL(ext4_xattr_set_handle);
