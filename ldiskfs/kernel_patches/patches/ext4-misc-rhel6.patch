Index: linux-2.6.32-el6-beta/fs/ext4/ext4_jbd2.h
===================================================================
--- linux-2.6.32-el6-beta.orig/fs/ext4/ext4_jbd2.h
+++ linux-2.6.32-el6-beta/fs/ext4/ext4_jbd2.h
@@ -35,6 +35,11 @@
 	(EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS)   \
 	 ? 27U : 8U)
 
+/* Indicate that EXT4_SINGLEDATA_TRANS_BLOCKS takes the sb as argument */
+#define EXT4_SINGLEDATA_TRANS_BLOCKS_HAS_SB
+
+#define ext4_journal_dirty_metadata(handle, bh)  \
+                ext4_handle_dirty_metadata(handle, NULL, bh)
 /* Extended attribute operations touch at most two data buffers,
  * two bitmap buffers, and two group summaries, in addition to the inode
  * and the superblock, which are already accounted for. */
Index: linux-2.6.32-el6-beta/fs/ext4/ext4_extents.h
===================================================================
--- linux-2.6.32-el6-beta.orig/fs/ext4/ext4_extents.h
+++ linux-2.6.32-el6-beta/fs/ext4/ext4_extents.h
@@ -58,6 +58,12 @@
  */
 #define EXT_STATS_
 
+/*
+ * define EXT4_ALLOC_NEEDED to 0 since block bitmap, group desc. and sb
+ * are now accounted in ext4_ext_calc_credits_for_insert()
+ */
+#define EXT4_ALLOC_NEEDED 0
+#define HAVE_EXT_PREPARE_CB_EXTENT
 
 /*
  * ext4_inode has i_block array (60 bytes total).
@@ -160,6 +166,7 @@ typedef int (*ext_prepare_callback)(stru
 #define EXT_INIT_MAX_LEN	(1UL << 15)
 #define EXT_UNINIT_MAX_LEN	(EXT_INIT_MAX_LEN - 1)
 
+#define EXT4_EXT_HAS_NO_TREE  /* ext4_extents_tree struct is not used*/
 
 #define EXT_FIRST_EXTENT(__hdr__) \
 	((struct ext4_extent *) (((char *) (__hdr__)) +		\
@@ -233,6 +240,8 @@ extern int ext4_extent_tree_init(handle_
 extern int ext4_ext_calc_credits_for_single_extent(struct inode *inode,
 						   int num,
 						   struct ext4_ext_path *path);
+extern int ext4_ext_calc_credits_for_insert(struct inode *,
+					    struct ext4_ext_path *);
 extern int ext4_can_extents_be_merged(struct inode *inode,
 				      struct ext4_extent *ex1,
 				      struct ext4_extent *ex2);
Index: linux-2.6.32-el6-beta/fs/ext4/mballoc.c
===================================================================
--- linux-2.6.32-el6-beta.orig/fs/ext4/mballoc.c
+++ linux-2.6.32-el6-beta/fs/ext4/mballoc.c
@@ -3838,6 +3838,13 @@ repeat:
 		kmem_cache_free(ext4_ac_cachep, ac);
 }
 
+/* For backward compatibility, since Lustre uses this symbol */
+void ext4_mb_discard_inode_preallocations(struct inode *inode)
+{
+	ext4_discard_preallocations(inode);
+}
+EXPORT_SYMBOL(ext4_mb_discard_inode_preallocations);
+
 /*
  * finds all preallocated spaces and return blocks being freed to them
  * if preallocated space becomes full (no block is used from the space)
@@ -4622,3 +4629,6 @@ error_return:
 		kmem_cache_free(ext4_ac_cachep, ac);
 	return;
 }
+
+EXPORT_SYMBOL(ext4_free_blocks);
+
Index: linux-2.6.32-el6-beta/fs/ext4/super.c
===================================================================
--- linux-2.6.32-el6-beta.orig/fs/ext4/super.c
+++ linux-2.6.32-el6-beta/fs/ext4/super.c
@@ -129,6 +129,7 @@ __u32 ext4_itable_unused_count(struct su
 		(EXT4_DESC_SIZE(sb) >= EXT4_MIN_DESC_SIZE_64BIT ?
 		 (__u32)le16_to_cpu(bg->bg_itable_unused_hi) << 16 : 0);
 }
+EXPORT_SYMBOL(ext4_itable_unused_count);
 
 void ext4_block_bitmap_set(struct super_block *sb,
 			   struct ext4_group_desc *bg, ext4_fsblk_t blk)
@@ -1457,6 +1458,7 @@ enum {
 	Opt_discard, Opt_nodiscard,
 	Opt_iopen, Opt_noiopen, Opt_iopen_nopriv,
 	Opt_bigendian_extents,
+	Opt_mballoc,
 };
 
 static const match_table_t tokens = {
@@ -1527,6 +1529,7 @@ static const match_table_t tokens = {
 	{Opt_auto_da_alloc, "auto_da_alloc"},
 	{Opt_noauto_da_alloc, "noauto_da_alloc"},
 	{Opt_bigendian_extents, "bigendian_extents"},
+	{Opt_mballoc, "mballoc"},
 	{Opt_discard, "discard"},
 	{Opt_nodiscard, "nodiscard"},
 	{Opt_err, NULL},
@@ -1969,6 +1972,8 @@ set_qf_format:
 		case Opt_bigendian_extents:
 			bigendian_extents = 1;
 			break;
+		case Opt_mballoc:
+			break;
 		case Opt_discard:
 			set_opt(sbi->s_mount_opt, DISCARD);
 			break;
Index: linux-2.6.32-el6-beta/fs/ext4/ext4_jbd2.c
===================================================================
--- linux-2.6.32-el6-beta.orig/fs/ext4/ext4_jbd2.c
+++ linux-2.6.32-el6-beta/fs/ext4/ext4_jbd2.c
@@ -31,6 +31,7 @@ int __ext4_journal_get_write_access(cons
 	}
 	return err;
 }
+EXPORT_SYMBOL(__ext4_journal_get_write_access);
 
 int __ext4_journal_forget(const char *where, handle_t *handle,
 				struct buffer_head *bh)
@@ -107,3 +108,4 @@ int __ext4_handle_dirty_metadata(const c
 	}
 	return err;
 }
+EXPORT_SYMBOL(__ext4_handle_dirty_metadata);
Index: linux-2.6.32-el6-beta/fs/ext4/ext4.h
===================================================================
--- linux-2.6.32-el6-beta.orig/fs/ext4/ext4.h
+++ linux-2.6.32-el6-beta/fs/ext4/ext4.h
@@ -1065,6 +1065,9 @@ static inline int ext4_valid_inum(struct
 
 #define NEXT_ORPHAN(inode) EXT4_I(inode)->i_dtime
 
+/* Has been moved to linux/magic.h but we need it for Lustre */
+#define EXT4_SUPER_MAGIC       0xEF53
+
 /*
  * Codes for operating systems
  */
@@ -1464,6 +1467,8 @@ extern int ext4_mb_add_groupinfo(struct 
 extern int ext4_mb_get_buddy_cache_lock(struct super_block *, ext4_group_t);
 extern void ext4_mb_put_buddy_cache_lock(struct super_block *,
 						ext4_group_t, int);
+extern void ext4_mb_discard_inode_preallocations(struct inode *);
+
 /* inode.c */
 int ext4_forget(handle_t *handle, int is_metadata, struct inode *inode,
 		struct buffer_head *bh, ext4_fsblk_t blocknr);
Index: linux-2.6.32-el6-beta/fs/ext4/inode.c
===================================================================
--- linux-2.6.32-el6-beta.orig/fs/ext4/inode.c
+++ linux-2.6.32-el6-beta/fs/ext4/inode.c
@@ -4992,6 +4992,7 @@ bad_inode:
 	iget_failed(inode);
 	return ERR_PTR(ret);
 }
+EXPORT_SYMBOL(ext4_iget);
 
 static int ext4_inode_blocks_set(handle_t *handle,
 				struct ext4_inode *raw_inode,
Index: linux-2.6.32-el6-beta/fs/ext4/extents.c
===================================================================
--- linux-2.6.32-el6-beta.orig/fs/ext4/extents.c
+++ linux-2.6.32-el6-beta/fs/ext4/extents.c
@@ -1761,9 +1761,7 @@ int ext4_ext_walk_space(struct inode *in
 	while (block < last && block != EXT_MAX_BLOCK) {
 		num = last - block;
 		/* find extent for this block */
-		down_read(&EXT4_I(inode)->i_data_sem);
 		path = ext4_ext_find_extent(inode, block, path);
-		up_read(&EXT4_I(inode)->i_data_sem);
 		if (IS_ERR(path)) {
 			err = PTR_ERR(path);
 			path = NULL;
@@ -1852,6 +1850,7 @@ int ext4_ext_walk_space(struct inode *in
 
 	return err;
 }
+EXPORT_SYMBOL(ext4_ext_walk_space);
 
 static void
 ext4_ext_put_in_cache(struct inode *inode, ext4_lblk_t block,
@@ -2017,6 +2016,55 @@ int ext4_ext_calc_credits_for_single_ext
 }
 
 /*
+ * This routine returns max. credits extent tree can consume.
+ * It should be OK for low-performance paths like ->writepage()
+ * To allow many writing process to fit a single transaction,
+ * caller should calculate credits under truncate_mutex and
+ * pass actual path.
+ */
+int ext4_ext_calc_credits_for_insert(struct inode *inode,
+				     struct ext4_ext_path *path)
+{
+	int depth, needed;
+
+	if (path) {
+		/* probably there is space in leaf? */
+		depth = ext_depth(inode);
+		if (le16_to_cpu(path[depth].p_hdr->eh_entries)
+				< le16_to_cpu(path[depth].p_hdr->eh_max))
+			return 1;
+	}
+
+	/*
+	 * given 32bit logical block (4294967296 blocks), max. tree
+	 * can be 4 levels in depth -- 4 * 340^4 == 53453440000.
+	 * let's also add one more level for imbalance.
+	 */
+	depth = 5;
+
+	/* allocation of new data block(s) */
+	needed = 2;
+
+	/*
+	 * tree can be full, so it'd need to grow in depth:
+	 * we need one credit to modify old root, credits for
+	 * new root will be added in split accounting
+	 */
+	needed += 1;
+	/*
+	 * Index split can happen, we'd need:
+	 *    allocate intermediate indexes (bitmap + group)
+	 *  + change two blocks at each level, but root (already included)
+	 */
+	needed += (depth * 2) + (depth * 2);
+
+	/* any allocation modifies superblock */
+	needed += 1;
+
+	return needed;
+}
+
+/*
  * How many index/leaf blocks need to change/allocate to modify nrblocks?
  *
  * if nrblocks are fit in a single extent (chunk flag is 1), then
@@ -3739,3 +3787,12 @@ int ext4_fiemap(struct inode *inode, str
 	return error;
 }
 
+EXPORT_SYMBOL(ext4_ext_store_pblock);
+EXPORT_SYMBOL(ext4_ext_search_right);
+EXPORT_SYMBOL(ext4_ext_search_left);
+EXPORT_SYMBOL(ext_pblock);
+EXPORT_SYMBOL(ext4_ext_insert_extent);
+EXPORT_SYMBOL(ext4_mb_new_blocks);
+EXPORT_SYMBOL(ext4_ext_calc_credits_for_insert);
+EXPORT_SYMBOL(ext4_mark_inode_dirty);
+
