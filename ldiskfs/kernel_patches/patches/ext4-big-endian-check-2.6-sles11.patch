diff -ur linux-stage.orig/fs/ext4/super.c linux-stage/fs/ext4/super.c
--- linux-stage.orig/fs/ext4/super.c	2011-05-12 11:02:00.000000000 -0400
+++ linux-stage/fs/ext4/super.c	2011-05-12 11:04:40.000000000 -0400
@@ -74,6 +74,8 @@
 
 struct proc_dir_entry *proc_root_ext4;
 
+static int bigendian_extents;
+
 ext4_fsblk_t ext4_block_bitmap(struct super_block *sb,
 			       struct ext4_group_desc *bg)
 {
@@ -1301,7 +1303,7 @@
 	Opt_ignore, Opt_barrier, Opt_err, Opt_resize, Opt_usrquota,
 	Opt_grpquota, Opt_extents, Opt_noextents, Opt_i_version,
 	Opt_stripe, Opt_delalloc, Opt_nodelalloc,
-	Opt_inode_readahead_blks
+	Opt_inode_readahead_blks, Opt_bigendian_extents
 };
 
 static const match_table_t tokens = {
@@ -1359,6 +1361,7 @@
 	{Opt_delalloc, "delalloc"},
 	{Opt_nodelalloc, "nodelalloc"},
 	{Opt_inode_readahead_blks, "inode_readahead_blks=%u"},
+	{Opt_bigendian_extents, "bigendian_extents"},
 	{Opt_err, NULL},
 };
 
@@ -1762,6 +1765,9 @@
 				return 0;
 			sbi->s_inode_readahead_blks = option;
 			break;
+		case Opt_bigendian_extents:
+			bigendian_extents = 1;
+			break;
 		default:
 			printk(KERN_ERR
 			       "EXT4-fs: Unrecognized mount option \"%s\" "
@@ -2657,6 +2663,15 @@
 		goto failed_mount;
 	}
 
+#ifdef __BIG_ENDIAN
+	if (bigendian_extents == 0) {
+		printk(KERN_ERR "EXT4-fs: extents feature is not guaranteed to "
+		       "work on big-endian systems. Use \"bigendian_extents\" "
+		       "mount option to override.\n");
+		goto failed_mount;
+	}
+#endif
+
 #ifdef CONFIG_PROC_FS
 	if (ext4_proc_root)
 		sbi->s_proc = proc_mkdir(sb->s_id, ext4_proc_root);
