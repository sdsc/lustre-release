---
 fs/ext4/ext4.h      |    1 +
 fs/ext4/ext4_jbd2.h |    2 +-
 fs/ext4/extents.c   |    4 ++--
 fs/ext4/ialloc.c    |    2 +-
 fs/ext4/migrate.c   |   11 ++++-------
 fs/ext4/super.c     |   38 ++++++++++++++++++++++++++++++++++++-
 6 files changed, 45 insertions(+), 12 deletions(-)

--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -982,6 +982,7 @@ struct ext4_inode_info {
 #define EXT4_MOUNT_POSIX_ACL		0x08000	/* POSIX Access Control Lists */
 #define EXT4_MOUNT_NO_AUTO_DA_ALLOC	0x10000	/* No auto delalloc mapping */
 #define EXT4_MOUNT_BARRIER		0x20000 /* Use block barriers */
+#define EXT4_MOUNT_EXTENTS		0x40000 /* Extents support */
 #define EXT4_MOUNT_QUOTA		0x80000 /* Some quota option set */
 #define EXT4_MOUNT_USRQUOTA		0x100000 /* "old" user quota */
 #define EXT4_MOUNT_GRPQUOTA		0x200000 /* "old" group quota */
--- a/fs/ext4/ext4_jbd2.h
+++ b/fs/ext4/ext4_jbd2.h
@@ -35,7 +35,7 @@
 
 #define EXT4_SINGLEDATA_TRANS_BLOCKS(sb)				\
 	(EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS)   \
-	 ? 20U : 8U)
+	 || test_opt(sb, EXTENTS) ? 20U : 8U)
 
 #define ext4_journal_dirty_metadata(handle, bh)  \
 		ext4_handle_dirty_metadata(handle, NULL, bh)
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -3048,7 +3048,7 @@ void ext4_ext_init(struct super_block *s
 	 * possible initialization would be here
 	 */
 
-	if (EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS)) {
+	if (test_opt(sb, EXTENTS)) {
 #if defined(AGGRESSIVE_TEST) || defined(CHECK_BINSEARCH) || defined(EXTENTS_STATS)
 		printk(KERN_INFO "EXT4-fs: file extents enabled"
 #ifdef AGGRESSIVE_TEST
@@ -3075,7 +3075,7 @@ void ext4_ext_init(struct super_block *s
  */
 void ext4_ext_release(struct super_block *sb)
 {
-	if (!EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS))
+	if (!test_opt(sb, EXTENTS))
 		return;
 
 #ifdef EXTENTS_STATS
--- a/fs/ext4/ialloc.c
+++ b/fs/ext4/ialloc.c
@@ -1022,7 +1022,7 @@ got:
 	if (err)
 		goto fail_free_drop;
 
-	if (EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS)) {
+	if (test_opt(sb, EXTENTS)) {
 		/* set extent flag only for directory, file and normal symlink*/
 		if (S_ISDIR(mode) || S_ISREG(mode) || S_ISLNK(mode)) {
 			ext4_set_inode_flag(inode, EXT4_INODE_EXTENTS);
--- a/fs/ext4/migrate.c
+++ b/fs/ext4/migrate.c
@@ -440,13 +440,10 @@ int ext4_ext_migrate(struct inode *inode
 	__u32 goal;
 	uid_t owner[2];
 
-	/*
-	 * If the filesystem does not support extents, or the inode
-	 * already is extent-based, error out.
-	 */
-	if (!EXT4_HAS_INCOMPAT_FEATURE(inode->i_sb,
-				       EXT4_FEATURE_INCOMPAT_EXTENTS) ||
-	    (ext4_test_inode_flag(inode, EXT4_INODE_EXTENTS)))
+	if (!test_opt(inode->i_sb, EXTENTS))
+		/*
+		 * if mounted with noextents we don't allow the migrate
+		 */
 		return -EINVAL;
 
 	if (S_ISLNK(inode->i_mode) && inode->i_blocks == 0)
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@ -1148,6 +1148,6 @@ enum {
 	Opt_dioread_nolock, Opt_dioread_lock,
 	Opt_discard, Opt_nodiscard, Opt_init_itable, Opt_noinit_itable,
-	Opt_max_dir_size_kb,
+	Opt_max_dir_size_kb, Opt_extents, Opt_noextents,
 };
 
 static const match_table_t tokens = {
@@ -1220,6 +1221,8 @@ static const match_table_t tokens = {
 	{Opt_dioread_nolock, "dioread_nolock"},
 	{Opt_dioread_lock, "dioread_lock"},
 	{Opt_force_over_128tb, "force_over_128tb"},
+	{Opt_extents, "extents"},
+	{Opt_noextents, "noextents"},
 	{Opt_discard, "discard"},
 	{Opt_nodiscard, "nodiscard"},
 	{Opt_init_itable, "init_itable=%u"},
@@ -1385,6 +1388,8 @@ static const struct mount_opts {
 	{Opt_auto_da_alloc, EXT4_MOUNT_NO_AUTO_DA_ALLOC, MOPT_CLEAR},
 	{Opt_noinit_itable, EXT4_MOUNT_INIT_INODE_TABLE, MOPT_CLEAR},
 	{Opt_no_mbcache, EXT4_MOUNT_NO_MBCACHE, MOPT_SET},
+	{Opt_extents, EXT4_MOUNT_EXTENTS, MOPT_SET},
+	{Opt_noextents, EXT4_MOUNT_EXTENTS, MOPT_CLEAR},
 	{Opt_commit, 0, MOPT_GTE0},
 	{Opt_max_batch_time, 0, MOPT_GTE0},
 	{Opt_min_batch_time, 0, MOPT_GTE0},
@@ -1633,6 +1638,29 @@ static int handle_mount_opt(struct super
 		}
 		sbi->s_jquota_fmt = m->mount_opt;
 #endif
+	} else if (token == Opt_extents) {
+		if (!EXT4_HAS_INCOMPAT_FEATURE(sb,
+				EXT4_FEATURE_INCOMPAT_EXTENTS)) {
+			ext4_msg(sb, KERN_ERR, "Extents feature not enabled "
+					 "on this filesystem, use tune2fs");
+			return -1;
+		}
+	} else if (token == Opt_noextents) {
+			ext4_fsblk_t last_block;
+			/*
+			 * When e2fsprogs support resizing an already existing
+			 * ext4 file system to greater than 2**32 we need to
+			 * add support to block allocator to handle growing
+			 * already existing block  mapped inode so that blocks
+			 * allocated for them fall within 2**32
+			 */
+			last_block = ext4_blocks_count(sbi->s_es) - 1;
+			if (last_block  > 0xffffffffULL) {
+				ext4_msg(sb, KERN_ERR,
+					 "EXT4-fs: Filesystem too large to "
+					 "mount with -o noextents options\n");
+				return -1;
+			}
 	} else {
 		if (!args->from)
 			arg = 1;
@@ -3519,6 +3547,14 @@ static int ext4_fill_super(struct super_
 		set_opt(sb, BARRIER);
 
 	/*
+	 * turn on extents feature by default in ext4 filesystem
+	 * only if feature flag already set by mkfs or tune2fs.
+	 * Use -o noextents to turn it off
+	 */
+	if (EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS))
+		set_opt(sb, EXTENTS);
+
+	/*
 	 * enable delayed allocation by default
 	 * Use -o nodelalloc to turn it off
 	 */
