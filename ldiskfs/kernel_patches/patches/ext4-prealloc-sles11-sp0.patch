diff -urp linux-stage.orig/fs/ext4/ext4.h linux-stage/fs/ext4/ext4.h
--- linux-stage.orig/fs/ext4/ext4.h	2011-05-24 14:32:58.000000000 -0400
+++ linux-stage/fs/ext4/ext4.h	2011-05-24 14:35:37.000000000 -0400
@@ -890,11 +890,14 @@ struct ext4_sb_info {
 
 	/* tunables */
 	unsigned long s_stripe;
-	unsigned int s_mb_stream_request;
+	unsigned long s_mb_small_req;
+	unsigned long s_mb_large_req;
 	unsigned int s_mb_max_to_scan;
 	unsigned int s_mb_min_to_scan;
 	unsigned int s_mb_stats;
 	unsigned int s_mb_order2_reqs;
+	unsigned long *s_mb_prealloc_table;
+	unsigned long s_mb_prealloc_table_size;
 	unsigned int s_mb_group_prealloc;
 	/* where last allocation was done - for stream allocation */
 	unsigned long s_mb_last_group;
diff -urp linux-stage.orig/fs/ext4/inode.c linux-stage/fs/ext4/inode.c
--- linux-stage.orig/fs/ext4/inode.c	2011-05-24 14:32:58.000000000 -0400
+++ linux-stage/fs/ext4/inode.c	2011-05-24 14:33:58.000000000 -0400
@@ -2474,14 +2474,14 @@ static int ext4_da_writepages(struct add
 		return -EROFS;
 
 	/*
-	 * Make sure nr_to_write is >= sbi->s_mb_stream_request
+	 * Make sure nr_to_write is >= sbi->s_mb_small_req
 	 * This make sure small files blocks are allocated in
 	 * single attempt. This ensure that small files
 	 * get less fragmented.
 	 */
-	if (wbc->nr_to_write < sbi->s_mb_stream_request) {
-		nr_to_writebump = sbi->s_mb_stream_request - wbc->nr_to_write;
-		wbc->nr_to_write = sbi->s_mb_stream_request;
+	if (wbc->nr_to_write < sbi->s_mb_small_req) {
+		nr_to_writebump = sbi->s_mb_small_req - wbc->nr_to_write;
+		wbc->nr_to_write = sbi->s_mb_small_req;
 	}
 	if (wbc->range_start == 0 && wbc->range_end == LLONG_MAX)
 		range_whole = 1;
Only in linux-stage/fs/ext4: inode.c.orig
diff -urp linux-stage.orig/fs/ext4/mballoc.c linux-stage/fs/ext4/mballoc.c
--- linux-stage.orig/fs/ext4/mballoc.c	2011-05-24 14:32:58.000000000 -0400
+++ linux-stage/fs/ext4/mballoc.c	2011-05-24 14:33:58.000000000 -0400
@@ -2002,7 +2002,7 @@ ext4_mb_regular_allocator(struct ext4_al
 	if (size < isize)
 		size = isize;
 
-	if (size < sbi->s_mb_stream_request &&
+	if ((ac->ac_g_ex.fe_len < sbi->s_mb_large_req) &&
 			(ac->ac_flags & EXT4_MB_HINT_DATA)) {
 		/* TBD: may be hot point */
 		spin_lock(&sbi->s_md_lock);
@@ -2692,6 +2692,26 @@ err_freesgi:
 	return -ENOMEM;
 }
 
+static void ext4_mb_prealloc_table_add(struct ext4_sb_info *sbi, int value)
+{
+	int i;
+
+	if (value > (sbi->s_blocks_per_group - 1 - 1 - sbi->s_itb_per_group))
+		return;
+
+	for (i = 0; i < sbi->s_mb_prealloc_table_size; i++) {
+		if (sbi->s_mb_prealloc_table[i] == 0) {
+			sbi->s_mb_prealloc_table[i] = value;
+			return;
+		}
+
+		/* they should add values in order */
+		if (value <= sbi->s_mb_prealloc_table[i])
+			return;
+	}
+}
+
+
 int ext4_mb_init(struct super_block *sb, int needs_recovery)
 {
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
@@ -2744,13 +2764,57 @@ int ext4_mb_init(struct super_block *sb,
 	sbi->s_mb_max_to_scan = MB_DEFAULT_MAX_TO_SCAN;
 	sbi->s_mb_min_to_scan = MB_DEFAULT_MIN_TO_SCAN;
 	sbi->s_mb_stats = MB_DEFAULT_STATS;
-	sbi->s_mb_stream_request = MB_DEFAULT_STREAM_THRESHOLD;
 	sbi->s_mb_order2_reqs = MB_DEFAULT_ORDER2_REQS;
 	sbi->s_mb_history_filter = EXT4_MB_HISTORY_DEFAULT;
-	sbi->s_mb_group_prealloc = MB_DEFAULT_GROUP_PREALLOC;
+
+	if (sbi->s_stripe == 0) {
+		sbi->s_mb_prealloc_table_size = 10;
+		i = sbi->s_mb_prealloc_table_size * sizeof(unsigned long);
+		sbi->s_mb_prealloc_table = kmalloc(i, GFP_NOFS);
+		if (sbi->s_mb_prealloc_table == NULL) {
+			kfree(sbi->s_mb_offsets);
+			kfree(sbi->s_mb_maxs);
+			return -ENOMEM;
+		}
+		memset(sbi->s_mb_prealloc_table, 0, i);
+
+		ext4_mb_prealloc_table_add(sbi, 4);
+		ext4_mb_prealloc_table_add(sbi, 8);
+		ext4_mb_prealloc_table_add(sbi, 16);
+		ext4_mb_prealloc_table_add(sbi, 32);
+		ext4_mb_prealloc_table_add(sbi, 64);
+		ext4_mb_prealloc_table_add(sbi, 128);
+		ext4_mb_prealloc_table_add(sbi, 256);
+		ext4_mb_prealloc_table_add(sbi, 512);
+		ext4_mb_prealloc_table_add(sbi, 1024);
+		ext4_mb_prealloc_table_add(sbi, 2048);
+
+		sbi->s_mb_small_req = 256;
+		sbi->s_mb_large_req = 1024;
+		sbi->s_mb_group_prealloc = 512;
+	} else {
+		sbi->s_mb_prealloc_table_size = 3;
+		i = sbi->s_mb_prealloc_table_size * sizeof(unsigned long);
+		sbi->s_mb_prealloc_table = kmalloc(i, GFP_NOFS);
+		if (sbi->s_mb_prealloc_table == NULL) {
+			kfree(sbi->s_mb_offsets);
+			kfree(sbi->s_mb_maxs);
+			return -ENOMEM;
+		}
+		memset(sbi->s_mb_prealloc_table, 0, i);
+
+		ext4_mb_prealloc_table_add(sbi, sbi->s_stripe);
+		ext4_mb_prealloc_table_add(sbi, sbi->s_stripe * 2);
+		ext4_mb_prealloc_table_add(sbi, sbi->s_stripe * 4);
+
+		sbi->s_mb_small_req = sbi->s_stripe;
+		sbi->s_mb_large_req = sbi->s_stripe * 8;
+		sbi->s_mb_group_prealloc = sbi->s_stripe * 4;
+	}
 
 	sbi->s_locality_groups = alloc_percpu(struct ext4_locality_group);
 	if (sbi->s_locality_groups == NULL) {
+		kfree(sbi->s_mb_prealloc_table);
 		kfree(sbi->s_mb_offsets);
 		kfree(sbi->s_mb_maxs);
 		return -ENOMEM;
@@ -2921,15 +2985,90 @@ ext4_mb_free_committed_blocks(struct sup
 #define EXT4_MB_MAX_TO_SCAN_NAME	"max_to_scan"
 #define EXT4_MB_MIN_TO_SCAN_NAME	"min_to_scan"
 #define EXT4_MB_ORDER2_REQ		"order2_req"
-#define EXT4_MB_STREAM_REQ		"stream_req"
+#define EXT4_MB_SMALL_REQ		"small_req"
+#define EXT4_MB_LARGE_REQ		"large_req"
+#define EXT4_MB_PREALLOC_TABLE		"prealloc_table"
 #define EXT4_MB_GROUP_PREALLOC		"group_prealloc"
 
+static int ext4_mb_prealloc_table_proc_read(char *page, char **start, off_t off,
+					    int count, int *eof, void *data)
+{
+	struct ext4_sb_info *sbi = data;
+	int len = 0;
+	int i;
+
+	*eof = 1;
+	if (off != 0)
+		return 0;
+
+	for (i = 0; i < sbi->s_mb_prealloc_table_size; i++)
+		len += sprintf(page + len, "%ld ",
+			       sbi->s_mb_prealloc_table[i]);
+	len += sprintf(page + len, "\n");
+
+	*start = page;
+	return len;
+}
+
+static int ext4_mb_prealloc_table_proc_write(struct file *file,
+					     const char __user *buf,
+					     unsigned long cnt, void *data)
+{
+	struct ext4_sb_info *sbi = data;
+	unsigned long value;
+	unsigned long prev = 0;
+	char str[128];
+	char *cur;
+	char *end;
+	unsigned long *new_table;
+	int num = 0;
+	int i = 0;
+
+	if (cnt >= sizeof(str))
+		return -EINVAL;
+	if (copy_from_user(str, buf, cnt))
+		return -EFAULT;
+
+	num = 0;
+	cur = str;
+	end = str + cnt;
+	while (cur < end) {
+		while ((cur < end) && (*cur == ' ')) cur++;
+		value = simple_strtol(cur, &cur, 0);
+		if (value == 0)
+			break;
+		if (value <= prev)
+			return -EINVAL;
+		prev = value;
+		num++;
+	}
+
+	new_table = kmalloc(num * sizeof(*new_table), GFP_KERNEL);
+	if (new_table == NULL)
+		return -ENOMEM;
+	kfree(sbi->s_mb_prealloc_table);
+	memset(new_table, 0, num * sizeof(*new_table));
+	sbi->s_mb_prealloc_table = new_table;
+	sbi->s_mb_prealloc_table_size = num;
+	cur = str;
+	end = str + cnt;
+	while (cur < end && i < num) {
+	while ((cur < end) && (*cur == ' ')) cur++;
+		value = simple_strtol(cur, &cur, 0);
+		ext4_mb_prealloc_table_add(sbi, value);
+		i++;
+	}
+
+	return cnt;
+}
+
 static int ext4_mb_init_per_dev_proc(struct super_block *sb)
 {
 #ifdef CONFIG_PROC_FS
 	mode_t mode = S_IFREG | S_IRUGO | S_IWUSR;
 	struct ext4_sb_info *sbi = EXT4_SB(sb);
 	struct proc_dir_entry *proc;
+	struct proc_dir_entry *proc_entry;
 
 	if (sbi->s_proc == NULL)
 		return -EINVAL;
@@ -2938,13 +3077,28 @@ static int ext4_mb_init_per_dev_proc(str
 	EXT4_PROC_HANDLER(EXT4_MB_MAX_TO_SCAN_NAME, mb_max_to_scan);
 	EXT4_PROC_HANDLER(EXT4_MB_MIN_TO_SCAN_NAME, mb_min_to_scan);
 	EXT4_PROC_HANDLER(EXT4_MB_ORDER2_REQ, mb_order2_reqs);
-	EXT4_PROC_HANDLER(EXT4_MB_STREAM_REQ, mb_stream_request);
+	EXT4_PROC_HANDLER(EXT4_MB_SMALL_REQ, mb_small_req);
+	EXT4_PROC_HANDLER(EXT4_MB_LARGE_REQ, mb_large_req);
 	EXT4_PROC_HANDLER(EXT4_MB_GROUP_PREALLOC, mb_group_prealloc);
+
+	proc_entry = create_proc_entry(EXT4_MB_PREALLOC_TABLE, S_IFREG |
+ 				       S_IRUGO | S_IWUSR, sbi->s_proc);
+	if (proc_entry == NULL) {
+		printk(KERN_ERR "EXT4-fs: unable to create %s\n",
+		       EXT4_MB_PREALLOC_TABLE);
+		goto err_out;
+	}
+	proc_entry->data = sbi;
+	proc_entry->read_proc = ext4_mb_prealloc_table_proc_read;
+	proc_entry->write_proc = ext4_mb_prealloc_table_proc_write;
+
 	return 0;
 
 err_out:
 	remove_proc_entry(EXT4_MB_GROUP_PREALLOC, sbi->s_proc);
-	remove_proc_entry(EXT4_MB_STREAM_REQ, sbi->s_proc);
+	remove_proc_entry(EXT4_MB_PREALLOC_TABLE, sbi->s_proc);
+	remove_proc_entry(EXT4_MB_LARGE_REQ, sbi->s_proc);
+	remove_proc_entry(EXT4_MB_SMALL_REQ, sbi->s_proc);
 	remove_proc_entry(EXT4_MB_ORDER2_REQ, sbi->s_proc);
 	remove_proc_entry(EXT4_MB_MIN_TO_SCAN_NAME, sbi->s_proc);
 	remove_proc_entry(EXT4_MB_MAX_TO_SCAN_NAME, sbi->s_proc);
@@ -2965,7 +3119,9 @@ static int ext4_mb_destroy_per_dev_proc(
 		return -EINVAL;
 
 	remove_proc_entry(EXT4_MB_GROUP_PREALLOC, sbi->s_proc);
-	remove_proc_entry(EXT4_MB_STREAM_REQ, sbi->s_proc);
+	remove_proc_entry(EXT4_MB_PREALLOC_TABLE, sbi->s_proc);
+	remove_proc_entry(EXT4_MB_LARGE_REQ, sbi->s_proc);
+	remove_proc_entry(EXT4_MB_SMALL_REQ, sbi->s_proc);
 	remove_proc_entry(EXT4_MB_ORDER2_REQ, sbi->s_proc);
 	remove_proc_entry(EXT4_MB_MIN_TO_SCAN_NAME, sbi->s_proc);
 	remove_proc_entry(EXT4_MB_MAX_TO_SCAN_NAME, sbi->s_proc);
@@ -3168,11 +3324,12 @@ static noinline_for_stack void
 ext4_mb_normalize_request(struct ext4_allocation_context *ac,
 				struct ext4_allocation_request *ar)
 {
-	int bsbits, max;
+	int bsbits, i, wind;
 	ext4_lblk_t end;
-	loff_t size, orig_size, start_off;
+	loff_t size, orig_size;
 	ext4_lblk_t start, orig_start;
 	struct ext4_inode_info *ei = EXT4_I(ac->ac_inode);
+	struct ext4_sb_info *sbi = EXT4_SB(ac->ac_sb);
 	struct ext4_prealloc_space *pa;
 
 	/* do normalize only data requests, metadata requests
@@ -3202,49 +3359,35 @@ ext4_mb_normalize_request(struct ext4_al
 	size = size << bsbits;
 	if (size < i_size_read(ac->ac_inode))
 		size = i_size_read(ac->ac_inode);
+	size = (size + ac->ac_sb->s_blocksize - 1) >> bsbits;
 
-	/* max size of free chunks */
-	max = 2 << bsbits;
+	start = wind = 0;
 
-#define NRL_CHECK_SIZE(req, size, max, chunk_size)	\
-		(req <= (size) || max <= (chunk_size))
+	/* let's choose preallocation window depending on file size */
+	for (i = 0; i < sbi->s_mb_prealloc_table_size; i++) {
+		if (size <= sbi->s_mb_prealloc_table[i]) {
+			wind = sbi->s_mb_prealloc_table[i];
+			break;
+		}
+	}
+	size = wind;
 
-	/* first, try to predict filesize */
-	/* XXX: should this table be tunable? */
-	start_off = 0;
-	if (size <= 16 * 1024) {
-		size = 16 * 1024;
-	} else if (size <= 32 * 1024) {
-		size = 32 * 1024;
-	} else if (size <= 64 * 1024) {
-		size = 64 * 1024;
-	} else if (size <= 128 * 1024) {
-		size = 128 * 1024;
-	} else if (size <= 256 * 1024) {
-		size = 256 * 1024;
-	} else if (size <= 512 * 1024) {
-		size = 512 * 1024;
-	} else if (size <= 1024 * 1024) {
-		size = 1024 * 1024;
-	} else if (NRL_CHECK_SIZE(size, 4 * 1024 * 1024, max, 2 * 1024)) {
-		start_off = ((loff_t)ac->ac_o_ex.fe_logical >>
-						(21 - bsbits)) << 21;
-		size = 2 * 1024 * 1024;
-	} else if (NRL_CHECK_SIZE(size, 8 * 1024 * 1024, max, 4 * 1024)) {
-		start_off = ((loff_t)ac->ac_o_ex.fe_logical >>
-							(22 - bsbits)) << 22;
-		size = 4 * 1024 * 1024;
-	} else if (NRL_CHECK_SIZE(ac->ac_o_ex.fe_len,
-					(8<<20)>>bsbits, max, 8 * 1024)) {
-		start_off = ((loff_t)ac->ac_o_ex.fe_logical >>
-							(23 - bsbits)) << 23;
-		size = 8 * 1024 * 1024;
-	} else {
-		start_off = (loff_t)ac->ac_o_ex.fe_logical << bsbits;
-		size	  = ac->ac_o_ex.fe_len << bsbits;
+	if (wind == 0) {
+		__u64 tstart, tend;
+		/* file is quite large, we now preallocate with
+		 * the biggest configured window with regart to
+		 * logical offset */
+		wind = sbi->s_mb_prealloc_table[i - 1];
+		tstart = ac->ac_o_ex.fe_logical;
+		do_div(tstart, wind);
+		start = tstart * wind;
+		tend = ac->ac_o_ex.fe_logical + ac->ac_o_ex.fe_len - 1;
+		do_div(tend, wind);
+		tend = tend * wind + wind;
+		size = tend - start;
 	}
-	orig_size = size = size >> bsbits;
-	orig_start = start = start_off >> bsbits;
+	orig_size = size;
+	orig_start = start;
 
 	/* don't cover already allocated blocks in selected range */
 	if (ar->pleft && start <= ar->lleft) {
@@ -3321,7 +3464,6 @@ ext4_mb_normalize_request(struct ext4_al
 	}
 	BUG_ON(start + size <= ac->ac_o_ex.fe_logical &&
 			start > ac->ac_o_ex.fe_logical);
-	BUG_ON(size <= 0 || size >= EXT4_BLOCKS_PER_GROUP(ac->ac_sb));
 
 	/* now prepare goal request */
 
@@ -4242,22 +4384,32 @@ static void ext4_mb_group_or_file(struct
 {
 	struct ext4_sb_info *sbi = EXT4_SB(ac->ac_sb);
 	int bsbits = ac->ac_sb->s_blocksize_bits;
-	loff_t size, isize;
+	loff_t size;
 
 	if (!(ac->ac_flags & EXT4_MB_HINT_DATA))
 		return;
 
-	size = ac->ac_o_ex.fe_logical + ac->ac_o_ex.fe_len;
-	isize = i_size_read(ac->ac_inode) >> bsbits;
-	size = max(size, isize);
-
-	/* don't use group allocation for large files */
-	if (size >= sbi->s_mb_stream_request)
+	if (ac->ac_o_ex.fe_len >= sbi->s_mb_small_req)
 		return;
 
 	if (unlikely(ac->ac_flags & EXT4_MB_HINT_GOAL_ONLY))
 		return;
 
+	/* request is so large that we don't care about
+	 * streaming - it overweights any possible seek */
+	if (ac->ac_o_ex.fe_len >= sbi->s_mb_large_req)
+		return;
+
+	size = ac->ac_o_ex.fe_logical + ac->ac_o_ex.fe_len;
+	size = size << bsbits;
+	if (size < i_size_read(ac->ac_inode))
+		size = i_size_read(ac->ac_inode);
+	size = (size + ac->ac_sb->s_blocksize - 1) >> bsbits;
+
+	/* don't use group allocation for large files */
+	if (size >= sbi->s_mb_large_req)
+		return;
+
 	BUG_ON(ac->ac_lg != NULL);
 	/*
 	 * locality group prealloc space are per cpu. The reason for having
Only in linux-stage/fs/ext4: mballoc.c.orig
