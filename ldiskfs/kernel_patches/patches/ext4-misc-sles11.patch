Index: linux-stage/fs/ext4/ext4_jbd2.h
===================================================================
--- linux-stage.orig/fs/ext4/ext4_jbd2.h
+++ linux-stage/fs/ext4/ext4_jbd2.h
@@ -35,6 +35,11 @@
 	(EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS)   \
 	 ? 27U : 8U)
 
+/* Indicate that EXT4_SINGLEDATA_TRANS_BLOCKS takes the sb as argument */
+#define EXT4_SINGLEDATA_TRANS_BLOCKS_HAS_SB
+
+#define ext4_journal_dirty_metadata(handle, bh)  \
+                ext4_handle_dirty_metadata(handle, NULL, bh)
 /* Extended attribute operations touch at most two data buffers,
  * two bitmap buffers, and two group summaries, in addition to the inode
  * and the superblock, which are already accounted for. */
Index: linux-stage/fs/ext4/extents.c
===================================================================
--- linux-stage.orig/fs/ext4/extents.c
+++ linux-stage/fs/ext4/extents.c
@@ -59,6 +59,17 @@ ext4_fsblk_t ext_pblock(struct ext4_exte
 }
 
 /*
+ * ext4_ext_store_pblock:
+ * stores a large physical block number into an extent struct,
+ * breaking it into parts
+ */
+void ext4_ext_store_pblock(struct ext4_extent *ex, ext4_fsblk_t pb)
+{
+	ex->ee_start_lo = cpu_to_le32((unsigned long) (pb & 0xffffffff));
+	ex->ee_start_hi = cpu_to_le16((unsigned long) ((pb >> 31) >> 1) & 0xffff);
+}
+
+/*
  * idx_pblock:
  * combine low and high parts of a leaf physical block number into ext4_fsblk_t
  */
@@ -72,17 +83,6 @@ ext4_fsblk_t idx_pblock(struct ext4_exte
 }
 
 /*
- * ext4_ext_store_pblock:
- * stores a large physical block number into an extent struct,
- * breaking it into parts
- */
-void ext4_ext_store_pblock(struct ext4_extent *ex, ext4_fsblk_t pb)
-{
-	ex->ee_start_lo = cpu_to_le32((unsigned long) (pb & 0xffffffff));
-	ex->ee_start_hi = cpu_to_le16((unsigned long) ((pb >> 31) >> 1) & 0xffff);
-}
-
-/*
  * ext4_idx_store_pblock:
  * stores a large physical block number into an index struct,
  * breaking it into parts
@@ -1994,6 +1994,56 @@ static int ext4_ext_rm_idx(handle_t *han
 }
 
 /*
+ * This routine returns max. credits extent tree can consume.
+ * It should be OK for low-performance paths like ->writepage()
+ * To allow many writing process to fit a single transaction,
+ * caller should calculate credits under truncate_mutex and
+ * pass actual path.
+ */
+int ext4_ext_calc_credits_for_insert(struct inode *inode,
+				    struct ext4_ext_path *path)
+{
+	int depth, needed;
+
+	if (path) {
+		/* probably there is space in leaf? */
+		depth = ext_depth(inode);
+		if (le16_to_cpu(path[depth].p_hdr->eh_entries)
+				< le16_to_cpu(path[depth].p_hdr->eh_max))
+			return 1;
+	}
+
+	/*
+	 * given 32bit logical block (4294967296 blocks), max. tree
+	 * can be 4 levels in depth -- 4 * 340^4 == 53453440000.
+	 * let's also add one more level for imbalance.
+	 */
+	depth = 5;
+
+	/* allocation of new data block(s) */
+	needed = 2;
+
+	/*
+	 * tree can be full, so it'd need to grow in depth:
+	 * we need one credit to modify old root, credits for
+	 * new root will be added in split accounting
+	 */
+	needed += 1;
+
+	/*
+	 * Index split can happen, we'd need:
+	 *    allocate intermediate indexes (bitmap + group)
+	 *  + change two blocks at each level, but root (already included)
+	 */
+	needed += (depth * 2) + (depth * 2);
+
+	/* any allocation modifies superblock */
+	needed += 1;
+
+	return needed;
+}
+
+/*
  * ext4_ext_calc_credits_for_single_extent:
  * This routine returns max. credits that needed to insert an extent
  * to the extent tree.
@@ -3883,3 +3933,14 @@ int ext4_fiemap(struct inode *inode, str
 	return error;
 }
 
+
+EXPORT_SYMBOL(ext4_ext_store_pblock);
+EXPORT_SYMBOL(ext4_ext_search_right);
+EXPORT_SYMBOL(ext4_ext_search_left);
+EXPORT_SYMBOL(ext_pblock);
+EXPORT_SYMBOL(ext4_ext_insert_extent);
+EXPORT_SYMBOL(ext4_mb_new_blocks);
+EXPORT_SYMBOL(ext4_ext_calc_credits_for_insert);
+EXPORT_SYMBOL(ext4_mark_inode_dirty);
+EXPORT_SYMBOL(ext4_ext_walk_space);
+
Index: linux-stage/fs/ext4/ext4_extents.h
===================================================================
--- linux-stage.orig/fs/ext4/ext4_extents.h
+++ linux-stage/fs/ext4/ext4_extents.h
@@ -58,6 +58,11 @@
  */
 #define EXT_STATS_
 
+/*
+ * define EXT4_ALLOC_NEEDED to 0 since block bitmap, group desc. and sb
+ * are now accounted in ext4_ext_calc_credits_for_insert()
+ */
+#define EXT4_ALLOC_NEEDED 0
 
 /*
  * ext4_inode has i_block array (60 bytes total).
@@ -123,6 +128,8 @@ struct ext4_ext_path {
 #define EXT4_EXT_CACHE_GAP	1
 #define EXT4_EXT_CACHE_EXTENT	2
 
+#define EXT4_EXT_HAS_NO_TREE  /* ext4_extents_tree struct is not used*/
+
 /*
  * to be called by ext4_ext_walk_space()
  * negative retcode - error
@@ -231,6 +238,8 @@ extern ext4_fsblk_t ext_pblock(struct ex
 extern ext4_fsblk_t idx_pblock(struct ext4_extent_idx *);
 extern void ext4_ext_store_pblock(struct ext4_extent *, ext4_fsblk_t);
 extern int ext4_extent_tree_init(handle_t *, struct inode *);
+extern int ext4_ext_calc_credits_for_insert(struct inode *,
+					    struct ext4_ext_path *);
 extern int ext4_ext_calc_credits_for_single_extent(struct inode *inode,
 						   int num,
 						   struct ext4_ext_path *path);
Index: linux-stage/fs/ext4/mballoc.c
===================================================================
--- linux-stage.orig/fs/ext4/mballoc.c
+++ linux-stage/fs/ext4/mballoc.c
@@ -4071,6 +4071,13 @@ repeat:
 		kmem_cache_free(ext4_ac_cachep, ac);
 }
 
+/* For backward compatibility, since Lustre uses this symbol */
+void ext4_mb_discard_inode_preallocations(struct inode *inode)
+{
+	ext4_discard_preallocations(inode);
+}
+EXPORT_SYMBOL(ext4_mb_discard_inode_preallocations);
+
 /*
  * finds all preallocated spaces and return blocks being freed to them
  * if preallocated space becomes full (no block is used from the space)
@@ -4863,3 +4870,6 @@ error_return:
 		kmem_cache_free(ext4_ac_cachep, ac);
 	return;
 }
+
+EXPORT_SYMBOL(ext4_free_blocks);
+
Index: linux-stage/fs/ext4/super.c
===================================================================
--- linux-stage.orig/fs/ext4/super.c
+++ linux-stage/fs/ext4/super.c
@@ -90,6 +90,7 @@ ext4_fsblk_t ext4_inode_bitmap(struct su
 		(EXT4_DESC_SIZE(sb) >= EXT4_MIN_DESC_SIZE_64BIT ?
 		 (ext4_fsblk_t)le32_to_cpu(bg->bg_inode_bitmap_hi) << 32 : 0);
 }
+EXPORT_SYMBOL(ext4_inode_bitmap);
 
 ext4_fsblk_t ext4_inode_table(struct super_block *sb,
 			      struct ext4_group_desc *bg)
@@ -1454,6 +1455,7 @@ enum {
 	Opt_inode_readahead_blks, Opt_journal_ioprio,
 	Opt_discard, Opt_nodiscard, Opt_bigendian_extents,
 	Opt_iopen, Opt_noiopen, Opt_iopen_nopriv,
+	Opt_mballoc, Opt_extents,
 };
 
 static const match_table_t tokens = {
@@ -1525,6 +1527,8 @@ static const match_table_t tokens = {
 	{Opt_discard, "discard"},
 	{Opt_nodiscard, "nodiscard"},
 	{Opt_bigendian_extents, "bigendian_extents"},
+	{Opt_extents, "extents"},
+	{Opt_mballoc, "mballoc"},
 	{Opt_err, NULL},
 };
 
@@ -1974,6 +1978,9 @@ set_qf_format:
 		case Opt_bigendian_extents:
 			bigendian_extents = 1;
 			break;
+		case Opt_mballoc:
+		case Opt_extents:
+			break;
 		default:
 			ext4_msg(sb, KERN_ERR,
 			       "Unrecognized mount option \"%s\" "
@@ -2062,7 +2069,7 @@ static int ext4_setup_super(struct super
 	ext4_commit_super(sb, 1);
 	if (test_opt(sb, DEBUG))
 		printk(KERN_INFO "[EXT4 FS bs=%lu, gc=%u, "
-				"bpg=%lu, ipg=%lu, mo=%04x]\n",
+				"bpg=%lu, ipg=%lu, mo=%04llx]\n",
 			sb->s_blocksize,
 			sbi->s_groups_count,
 			EXT4_BLOCKS_PER_GROUP(sb),
Index: linux-stage/fs/ext4/ext4_jbd2.c
===================================================================
--- linux-stage.orig/fs/ext4/ext4_jbd2.c
+++ linux-stage/fs/ext4/ext4_jbd2.c
@@ -31,6 +31,7 @@ int __ext4_journal_get_write_access(cons
 	}
 	return err;
 }
+EXPORT_SYMBOL(__ext4_journal_get_write_access);
 
 int __ext4_journal_forget(const char *where, handle_t *handle,
 				struct buffer_head *bh)
@@ -107,3 +108,4 @@ int __ext4_handle_dirty_metadata(const c
 	}
 	return err;
 }
+EXPORT_SYMBOL(__ext4_handle_dirty_metadata);
Index: linux-stage/fs/ext4/ext4.h
===================================================================
--- linux-stage.orig/fs/ext4/ext4.h
+++ linux-stage/fs/ext4/ext4.h
@@ -37,6 +37,11 @@
  * The fourth extended filesystem constants/structures
  */
 
+/* Has been moved to linux/magic.h but we need it for Lustre */
+#define EXT4_SUPER_MAGIC	0xEF53
+
+#define HAVE_EXT_PREPARE_CB_EXTENT
+#define EXT_INSERT_EXTENT_WITH_5ARGS
 /*
  * Define EXT4FS_DEBUG to produce debug messages
  */
@@ -501,7 +506,7 @@ struct ext4_new_group_data {
  *  Mount options
  */
 struct ext4_mount_options {
-	unsigned long s_mount_opt;
+	unsigned long long s_mount_opt;
 	uid_t s_resuid;
 	gid_t s_resgid;
 	unsigned long s_commit_interval;
@@ -576,6 +581,8 @@ struct ext4_inode {
 	__le32  i_crtime_extra; /* extra FileCreationtime (nsec << 2 | epoch) */
 	__le32  i_version_hi;	/* high 32 bits for 64-bit version */
 };
+/* SLES11 kernel already has 64-bit inode->i_version field */
+#define HAVE_DISK_INODE_VERSION
 
 struct move_extent {
 	__u32 reserved;		/* should be zero */
@@ -997,7 +1004,7 @@ struct ext4_sb_info {
 	struct buffer_head * s_sbh;	/* Buffer containing the super block */
 	struct ext4_super_block *s_es;	/* Pointer to the super block in the buffer */
 	struct buffer_head **s_group_desc;
-	unsigned int s_mount_opt;
+	unsigned long long s_mount_opt;      /* lustre need more options */
 	unsigned int s_mount_flags;
 	ext4_fsblk_t s_sb_block;
 	uid_t s_resuid;
@@ -1582,6 +1589,8 @@ extern int ext4_mb_add_groupinfo(struct 
 extern int ext4_mb_get_buddy_cache_lock(struct super_block *, ext4_group_t);
 extern void ext4_mb_put_buddy_cache_lock(struct super_block *,
 						ext4_group_t, int);
+extern void ext4_mb_discard_inode_preallocations(struct inode *);
+
 /* inode.c */
 int ext4_forget(handle_t *handle, int is_metadata, struct inode *inode,
 		struct buffer_head *bh, ext4_fsblk_t blocknr);
Index: linux-stage/fs/ext4/inode.c
===================================================================
--- linux-stage.orig/fs/ext4/inode.c
+++ linux-stage/fs/ext4/inode.c
@@ -93,7 +93,7 @@ int ext4_forget(handle_t *handle, int is
 	BUFFER_TRACE(bh, "enter");
 
 	jbd_debug(4, "forgetting bh %p: is_metadata = %d, mode %o, "
-		  "data mode %x\n",
+		  "data mode %Lx\n",
 		  bh, is_metadata, inode->i_mode,
 		  test_opt(inode->i_sb, DATA_FLAGS));
 
@@ -5055,6 +5055,7 @@ bad_inode:
 	iget_failed(inode);
 	return ERR_PTR(ret);
 }
+EXPORT_SYMBOL(ext4_iget);
 
 static int ext4_inode_blocks_set(handle_t *handle,
 				struct ext4_inode *raw_inode,
Index: linux-stage/fs/ext4/fiemap.h
===================================================================
--- /dev/null
+++ linux-stage/fs/ext4/fiemap.h
@@ -0,0 +1,3 @@
+
+#include_next <fiemap.h>
+
Index: linux-stage/fs/ext4/move_extent.c
===================================================================
--- linux-stage.orig/fs/ext4/move_extent.c
+++ linux-stage/fs/ext4/move_extent.c
@@ -483,7 +483,7 @@ mext_leaf_block(handle_t *handle, struct
 
 	o_start = o_end = oext = orig_path[depth].p_ext;
 	oext_alen = ext4_ext_get_actual_len(oext);
-	start_ext.ee_len = end_ext.ee_len = 0;
+	start_ext.ee_block = start_ext.ee_len = end_ext.ee_len = 0;
 
 	new_ext.ee_block = cpu_to_le32(*from);
 	ext4_ext_store_pblock(&new_ext, ext_pblock(dext));
