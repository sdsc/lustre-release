Index: linux-stage/fs/ext4/ext4.h
===================================================================
--- linux-stage.orig/fs/ext4/ext4.h	2011-05-20 10:59:32.000000000 +0300
+++ linux-stage/fs/ext4/ext4.h	2011-05-20 11:01:06.000000000 +0300
@@ -1191,6 +1191,9 @@ EXT4_INODE_BIT_FNS(state, state_flags)
 
 #define NEXT_ORPHAN(inode) EXT4_I(inode)->i_dtime
 
+/* Has been moved to linux/magic.h but we need it for Lustre */
+#define EXT4_SUPER_MAGIC	0xEF53
+
 /*
  * Codes for operating systems
  */
@@ -1630,6 +1633,9 @@ extern void ext4_mb_put_buddy_cache_lock
 						ext4_group_t, int);
 extern int ext4_trim_fs(struct super_block *, struct fstrim_range *);
 
+extern void ext4_mb_discard_inode_preallocations(struct inode *);
+
+
 /* inode.c */
 int ext4_forget(handle_t *handle, int is_metadata, struct inode *inode,
 		struct buffer_head *bh, ext4_fsblk_t blocknr);
Index: linux-stage/fs/ext4/ext4_extents.h
===================================================================
--- linux-stage.orig/fs/ext4/ext4_extents.h	2011-05-20 10:59:30.000000000 +0300
+++ linux-stage/fs/ext4/ext4_extents.h	2011-05-20 11:00:01.000000000 +0300
@@ -58,6 +58,12 @@
  */
 #define EXT_STATS_
 
+/*
+ * define EXT4_ALLOC_NEEDED to 0 since block bitmap, group desc. and sb
+ * are now accounted in ext4_ext_calc_credits_for_insert()
+ */
+#define EXT4_ALLOC_NEEDED 0
+#define HAVE_EXT_PREPARE_CB_EXTENT
 
 /*
  * ext4_inode has i_block array (60 bytes total).
@@ -239,6 +245,8 @@ extern int ext4_extent_tree_init(handle_
 extern int ext4_ext_calc_credits_for_single_extent(struct inode *inode,
 						   int num,
 						   struct ext4_ext_path *path);
+extern int ext4_ext_calc_credits_for_insert(struct inode *,
+					    struct ext4_ext_path *);
 extern int ext4_can_extents_be_merged(struct inode *inode,
 				      struct ext4_extent *ex1,
 				      struct ext4_extent *ex2);
Index: linux-stage/fs/ext4/ext4_jbd2.c
===================================================================
--- linux-stage.orig/fs/ext4/ext4_jbd2.c	2011-05-20 10:59:29.000000000 +0300
+++ linux-stage/fs/ext4/ext4_jbd2.c	2011-05-20 11:00:01.000000000 +0300
@@ -31,6 +31,7 @@ int __ext4_journal_get_write_access(cons
 	}
 	return err;
 }
+EXPORT_SYMBOL(__ext4_journal_get_write_access);
 
 int __ext4_journal_forget(const char *where, handle_t *handle,
 				struct buffer_head *bh)
@@ -107,3 +108,4 @@ int __ext4_handle_dirty_metadata(const c
 	}
 	return err;
 }
+EXPORT_SYMBOL(__ext4_handle_dirty_metadata);
Index: linux-stage/fs/ext4/ext4_jbd2.h
===================================================================
--- linux-stage.orig/fs/ext4/ext4_jbd2.h	2011-05-20 10:59:29.000000000 +0300
+++ linux-stage/fs/ext4/ext4_jbd2.h	2011-05-20 11:00:01.000000000 +0300
@@ -35,6 +35,8 @@
 	(EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_EXTENTS)   \
 	 ? 27U : 8U)
 
+#define ext4_journal_dirty_metadata(handle, bh)  \
+		ext4_handle_dirty_metadata(handle, NULL, bh)
 /* Extended attribute operations touch at most two data buffers,
  * two bitmap buffers, and two group summaries, in addition to the inode
  * and the superblock, which are already accounted for. */
Index: linux-stage/fs/ext4/extents.c
===================================================================
--- linux-stage.orig/fs/ext4/extents.c
+++ linux-stage/fs/ext4/extents.c
@@ -2133,6 +2133,56 @@ int ext4_ext_calc_credits_for_single_ext
 }
 
 /*
+ * This routine returns max. credits extent tree can consume.
+ * It should be OK for low-performance paths like ->writepage()
+ * To allow many writing process to fit a single transaction,
+ * caller should calculate credits under truncate_mutex and
+ * pass actual path.
+ */
+int ext4_ext_calc_credits_for_insert(struct inode *inode,
+				     struct ext4_ext_path *path)
+{
+	int depth, needed;
+
+	if (path) {
+		/* probably there is space in leaf? */
+		depth = path->p_depth;
+		if (le16_to_cpu(path[depth].p_hdr->eh_entries)
+				< le16_to_cpu(path[depth].p_hdr->eh_max))
+			return 1;
+	}
+
+	/*
+	 * given 32bit logical block (4294967296 blocks), max. tree
+	 * can be 4 levels in depth -- 4 * 340^4 == 53453440000.
+	 * let's also add one more level for imbalance.
+	 */
+	depth = 5;
+
+	/* allocation of new data block(s) */
+	needed = 2;
+
+	/*
+	 * tree can be full, so it'd need to grow in depth:
+	 * we need one credit to modify old root, credits for
+	 * new root will be added in split accounting
+	 */
+	needed += 1;
+	/*
+	 * Index split can happen, we'd need:
+	 *    allocate intermediate indexes (bitmap + group)
+	 *  + change two blocks at each level, but root (already included)
+	 */
+	needed += (depth * 2) + (depth * 2);
+
+	/* any allocation modifies superblock */
+	needed += 1;
+
+	return needed;
+}
+EXPORT_SYMBOL(ext4_ext_calc_credits_for_insert);
+
+/*
  * How many index/leaf blocks need to change/allocate to modify nrblocks?
  *
  * if nrblocks are fit in a single extent (chunk flag is 1), then
Index: linux-stage/fs/ext4/inode.c
===================================================================
--- linux-stage.orig/fs/ext4/inode.c	2011-05-20 10:59:31.000000000 +0300
+++ linux-stage/fs/ext4/inode.c	2011-05-20 11:00:01.000000000 +0300
@@ -5249,6 +5249,7 @@ bad_inode:
 	iget_failed(inode);
 	return ERR_PTR(ret);
 }
+EXPORT_SYMBOL(ext4_iget);
 
 static int ext4_inode_blocks_set(handle_t *handle,
 				struct ext4_inode *raw_inode,
Index: linux-stage/fs/ext4/mballoc.c
===================================================================
--- linux-stage.orig/fs/ext4/mballoc.c	2011-05-20 10:59:32.000000000 +0300
+++ linux-stage/fs/ext4/mballoc.c	2011-05-20 11:00:01.000000000 +0300
@@ -4044,6 +4044,7 @@ repeat:
 	if (ac)
 		kmem_cache_free(ext4_ac_cachep, ac);
 }
+EXPORT_SYMBOL(ext4_discard_preallocations);
 
 /*
  * finds all preallocated spaces and return blocks being freed to them
@@ -5029,3 +5030,6 @@ int ext4_trim_fs(struct super_block *sb,
 
 	return ret;
 }
+
+EXPORT_SYMBOL(ext4_free_blocks);
+
Index: linux-stage/fs/ext4/super.c
===================================================================
--- linux-stage.orig/fs/ext4/super.c	2011-05-20 10:59:31.000000000 +0300
+++ linux-stage/fs/ext4/super.c	2011-05-20 11:00:01.000000000 +0300
@@ -1500,10 +1501,12 @@ enum {
 	Opt_usrjquota, Opt_grpjquota, Opt_offusrjquota, Opt_offgrpjquota,
 	Opt_jqfmt_vfsold, Opt_jqfmt_vfsv0, Opt_jqfmt_vfsv1, Opt_quota,
 	Opt_noquota, Opt_barrier, Opt_nobarrier, Opt_err,
+	Opt_iopen, Opt_noiopen, Opt_iopen_nopriv,
 	Opt_usrquota, Opt_grpquota, Opt_i_version,
 	Opt_stripe, Opt_delalloc, Opt_nodelalloc, Opt_mblk_io_submit,
 	Opt_nomblk_io_submit, Opt_block_validity, Opt_noblock_validity,
 	Opt_inode_readahead_blks, Opt_journal_ioprio,
+	Opt_mballoc,
 	Opt_dioread_nolock, Opt_dioread_lock,
 	Opt_discard, Opt_nodiscard, Opt_init_itable, Opt_noinit_itable,
 	Opt_max_dir_size_kb,
@@ -1556,6 +1559,10 @@ static const match_table_t tokens = {             
	{Opt_noquota, "noquota"},
	{Opt_quota, "quota"},
	{Opt_usrquota, "usrquota"},
+	{Opt_iopen, "iopen"},
+	{Opt_noiopen, "noiopen"},
+	{Opt_iopen_nopriv, "iopen_nopriv"},
+	{Opt_mballoc, "mballoc"},
	{Opt_barrier, "barrier=%u"},
	{Opt_barrier, "barrier"},
	{Opt_nobarrier, "nobarrier"},
@@ -1928,6 +1935,11 @@ set_qf_format:           
			return -1;
		*journal_ioprio = IOPRIO_PRIO_VALUE(IOPRIO_CLASS_BE, arg);
		return 1;
+	case Opt_iopen:
+	case Opt_noiopen:
+	case Opt_iopen_nopriv:
+	case Opt_mballoc:
+		return 1;
	}

	for (m = ext4_mount_opts; m->token != Opt_err; m++) {
