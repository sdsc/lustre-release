#!/bin/bash
#
# A hook script to check the commit log message.
# Called by git-commit with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
#
# From Gerrit Code Review 2.1.5.1
#
# Part of Gerrit Code Review (http://code.google.com/p/gerrit/)
#
# Copyright (C) 2009 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

MSG="$1"
SIGNOFF="Signed-off-by:"
CHANGEID="Change-Id:"

# Check for, and add if missing, a unique Change-Id
_gen_ChangeIdInput() {
	echo "tree $(git write-tree)"
	if parent=$(git rev-parse HEAD^0 2>/dev/null); then
		echo "parent $parent"
	fi
	echo "author $(git var GIT_AUTHOR_IDENT)"
	echo "committer $(git var GIT_COMMITTER_IDENT)"
	echo
	sed -e '
		/^diff --git a\/.*/{
			s///
			q
		}
		/^Signed-off-by:/d
		/^#/d
	' "$MSG" | git stripspace
}
_gen_ChangeId() {
	_gen_ChangeIdInput | git hash-object -t commit --stdin
}

usage() {
	[ "$LINE" ] && echo "error:$NUM: $LINE" 1>&2 && echo "" 1>&2

	cat 1>&2 <<- EOF
	Commit message $1
	$2
	See http://wiki.whamcloud.com/display/PUB/Submitting+Changes
	for full details.  An example valid commit comment is:

	LU-nnn component: short description of change under 64 columns

	A more detailed explanation.  This can be as detailed as you'd like.
	Please explain both what problem was solved and a good high-level
	description of how it was solved.  Wrap lines at 72 columns or less.

	$SIGNOFF Your Real Name <your_email@domain.name>
	$CHANGEID Ixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
	EOF

	exit 1
}

export HAS_SIGNOFF=false
export HAS_SUMMARY=false
export HAS_BLANK=false

grep -q "^$CHANGEID" "$MSG" && HAS_CHANGEID=true || HAS_CHANGEID=false

export LINE=""
export NUM=1

while read LINE; do
	LENGTH=$(echo $LINE | wc -c)
	$HAS_CHANGEID || echo $LINE 

	case "$LINE" in
	\#*) continue ;;
	$SIGNOFF*)
		$HAS_SUMMARY || usage "missing summary before $SIGNOFF."
		$HAS_BLANK || usage "missing blank line before $SIGNOFF."
		GOOD=$(echo "$LINE" | grep "^$SIGNOFF .* .* <.*@.*>")
		[ -z "$GOOD" ] &&
			usage "missing valid commit summary line to show" \
			      "agreement with code submission requirements at"
		HAS_SIGNOFF=true
		$HAS_CHANGEID || echo "$CHANGEID I$(_gen_ChangeId)"
		;;
	$CHANGEID*)
		$HAS_SUMMARY || usage "missing summary before $CHANGEID line."
		$HAS_BLANK || usage "missing blank line before $CHANGEID line."
		HAS_CHANGEID=true
		;;
	"")	[ $HAS_SUMMARY -a $NUM -eq 2 ] && HAS_BLANK=true || continue
		;;
	*)	if [ $NUM -eq 1 ]; then
			FMT="^[A-Z]\{2,5\}-[0-9]\{1,5\} [-a-z0-9]\{2,9\}: "
			GOOD=$(echo "$LINE" | grep "$FMT")
			[ $LENGTH -gt 64 ] &&
				usage "summary longer than 64 columns."
			if [ -z "$GOOD" ]; then
				FMT="^[A-Z]\{2,5\}-[0-9]\{1,5\} "
				NO_SUBSYS=$(echo "$LINE" | grep "$FMT")
				[ "$NO_SUBSYS" ] &&
					usage "has no subsys: in commit summary"
				usage "missing valid commit summary line."
			fi
			HAS_SUMMARY=true
		elif [ $LENGTH -gt 72 ]; then
			usage "has lines longer than 73 columns."
		fi
 		;;
	esac

	NUM=$((NUM + 1))
done < "$MSG" > "$MSG.new"

[ $NUM -eq 1 ] && exit 1 # empty file

LINE=""
$HAS_SUMMARY || usage "missing commit summary line."
$HAS_SIGNOFF || usage "missing $SIGNOFF line."
$HAS_CHANGEID && rm "$MSG.new" || mv "$MSG.new" "$MSG"
