# vim:expandtab:shiftwidth=4:softtabstop=4:tabstop=4:

# increment this if you have made a change that should force a new kernel
# to build built for this distribution (only -- if you want to force a kernel
# build on all distributions, update the BUILD_GEN variable in build/lbuild)
BUILD_GEN+=".0"

source ${0%/*}/lbuild-sles

# do we want to rebuild the OFED devel RPM or use the supplied one?
REBUILD_OFED_DEVEL_RPM=${REBUILD_OFED_DEVEL_RPM:-false}

edit_specs() {

    # edit the SPECs with our changes
    local spec
    for spec in $RPMSMPTYPE source; do
        #cp $TOPDIR/SOURCES/kernel-$spec.spec{,.orig}
        sed -i -e "s/^\(Release: *\).*$/\1${lnxrel}_${buildid}/" \
               -e "s/^ExclusiveArch:.*/& ppc ppc64/" \
               -e '/^%setup /a\
cp  %_sourcedir/linux-2.6.27-lustre.patch %_builddir/%{name}-%{version}/lustre.patch\
! grep -q lustre.patch %_sourcedir/series.conf && echo -e "\\n\\tlustre.patch" >> %_sourcedir/series.conf' \
               -e "/flavor=\${config/a\
    [ \"\$flavor\" == \"$RPMSMPTYPE\" ] || continue" \
               -e "s/^\(BuildRequires:  kernel-dummy\)/# \1/" \
          SOURCES/kernel-${spec}.spec || \
            fatal 1 "Error while editing SOURCES/kernel-${spec}.spec"

        if $KERNEL_LUSTRE_NAMING; then
            # these are all of the changes needed because we change the package names
            # to kernel-lustre-*.  these should all go away when we stop this insanity
            sed -i -e 's/^\(Name:.*kernel-\)\(.*\)/\1lustre-\2/' \
                   -e "/^Provides:  *kernel = /a\
Provides:       kernel-$spec = %{version}-%{release}
" \
                   -e 's/^\([ 	][ 	]*-i %_builddir\/kernel-\)\(source-2.6.27.21\/\$patch; then\)/\1lustre-\2/' \
                   -e '/^%build/,/^%changelog/s/\(kernel-\)\(source\.files\)/\1lustre-\2/g' \
                   -e '/--no-backup-if-mismatch/,/fi/s/kernel-source-/kernel-lustre-source-/g' \
                   -e "s/^\(%package -n kernel-\)\(.*\)/\1lustre-\2/" \
                   -e "s/^\(%description -n kernel-\)\(.*\)/\1lustre-\2/" \
                   -e "s/^\(%files -n kernel-\)\(.*\)/\1lustre-\2/" \
                   -e "s/^\(Provides:.*kernel-\)\(.*\)/\1lustre-\2/" \
                   -e "s/^\(Requires:.*kernel-\)\(.*\)/\1lustre-\2/" \
                   -e "s/^\(Supplements:.*kernel-\)\(.*\)/\1lustre-\2/" \
                SOURCES/kernel-${spec}.spec || \
                fatal 1 "Error while editing SOURCES/kernel-${spec}.spec"
        fi

        # XXX - a building-on-Ubuntu hack
        if grep -q "Ubuntu" /etc/issue; then
            sed -i -e '/^%_sourcedir\/install-configs %_sourcedir .*/i\
curl ftp://ftp.kernel.org/pub/linux/kernel/people/akpm/patches/2.6/2.6.17/2.6.17-mm1/broken-out/i386-use-c-code-for-current_thread_info.patch | patch -p1' \
                   -e 's/^\(BuildRequires: .*\)$/#NOU \1/g' \
                   -e 's/%(\(chmod .*\))$/%(bash -c "\1")/' \
                   -e 's/ -a 109//' \
              SOURCES/kernel-${spec}.spec || \
            fatal 1 "Error while editing SOURCES/kernel-${spec}.spec"
        fi
    done
}

unpack_linux_devel_rpm-sles11() {
    local callers_rpm="$1"

    local rpmdir="${callers_rpm%/*}"

    local kernelrpm
    local wanted_kernel="${lnxmaj}${lnxmin}-${lnxrel}"

    # this is a hack that should go away when the modified lustre kernel
    # Provides kernel-default-base                        vvvvvvvvv
    if ! kernelrpm=$(find_rpm "$rpmdir" provides "^kernel-(lustre-)?default-base = $wanted_kernel"); then
        fatal 1 "Could not find the kernel-default-base in $rpmdir/"
    fi

    if ! rpm2cpio < "$rpmdir/$kernelrpm" | cpio -id > /dev/null 2>&1; then
        fatal 1 "Unpack error for $kernelrpm"
    fi

    if ! kernelrpm=$(find_rpm "$rpmdir" provides "^kernel-(lustre-)?default-devel = $wanted_kernel"); then
        fatal 1 "Could not find the kernel-default-devel in $rpmdir/"
    fi

    if ! rpm2cpio < "$rpmdir/$kernelrpm" | cpio -id > /dev/null 2>&1; then
        fatal 1 "Unpack error for $kernelrpm"
    fi

}

find_linux_rpm-sles11() {
    local prefix="$1"
    local wanted_kernel="$2"
    local pathtorpms=${3:-"${KERNELRPMSBASE}/${lnxmaj}/${DISTRO}/${TARGET_ARCH}"}

    # what, oh what, do we do for sles11?
    # if anyone knows how we get an arbitrary (kernel-source and
    # kernel-default-base in this case) from the Suse update mechanism,
    # please feel free to fix this

    fatal 1 "I don't know how to get packages for SLES11"

    return 0

}

# sles11 doesn't follow the sles10 model
#build_ofed-sles11() {
#    local outfd=$1
#
#    if [ -z "$outfd" ] || [ $outfd = 1 ]; then
#        fatal 1 "You must supply a file descriptor to ${FUNCNAME[0]} and it cannot be 1"
#    fi
#
#    if $REBUILD_OFED_DEVEL_RPM; then
#        build_sles_ofed_rpm cxgb3-NIC >&${outfd} || return ${PIPESTATUS[0]}
#        build_sles_ofed_rpm >&${outfd} || return ${PIPESTATUS[0]}
#        OFED_DEVEL_LOCATION="${TOPDIR}/RPMS/$(resolve_arch $TARGET_ARCH $PATCHLESS)"
#    fi # $REBUILD_OFED_DEVEL_RPM; then
#
#    # XXX I'm not convinced this belongs in here, but really, this is a
#    # temporary hack until we get a base O/S intalled ofed-devel
#    local arch=$TARGET_ARCH
#    if [ -n "$OFED_VERSION" -a "$OFED_VERSION" = "inkernel" ]; then
#        local ofed_devel="${OFED_DEVEL_LOCATION}/ofed-devel-${OFED_DEVEL_VERSION}.$(resolve_arch $TARGET_ARCH "$PATCHLESS || ! $REBUILD_OFED_DEVEL_RPM").rpm"
#        if ! rpm2cpio < $ofed_devel | cpio -id; then
#            fatal 1 "could not unpack the ofed-devel rpm."
#	fi
#        echo "$(pwd)/usr/src/kernel-modules-ofed/$(resolve_arch $TARGET_ARCH "$PATCHLESS || ! $REBUILD_OFED_DEVEL_RPM")/$RPMSMPTYPE"
#    fi
#
#    return 0
#
#}
